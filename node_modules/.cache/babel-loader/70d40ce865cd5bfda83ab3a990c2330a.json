{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/davidacuna/Documents/Spotify_test/spotify_test/src/components/main.js\";\nimport Axios from 'axios';\nimport React from 'react';\nimport '../css/main.scss';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      artist: '',\n      albums: false,\n      content_albums: [],\n      id: '',\n      albumnes: ''\n    };\n  }\n\n  albums(e) {\n    console.log(e.currentTarget);\n    let temp_state = this;\n    this.setState({\n      albums: true,\n      id: e.currentTarget.id\n    });\n    let artist_id = e.currentTarget.id;\n    console.log(artist_id);\n    console.log(this.props.token);\n    Axios('https://api.spotify.com/v1/artists/' + artist_id + '/albums', {\n      headers: {\n        'Authorization': 'Bearer ' + this.props.token\n      },\n      params: {\n        id: artist_id\n      },\n      method: 'GET'\n    }).then(function (response) {\n      // handle success\n      console.log(response);\n      let albums_respuesta = response;\n      albums_respuesta = JSON.stringify(albums_respuesta);\n      temp_state.setState({\n        albumnes: albums_respuesta\n      });\n      var albums = [];\n      albums = JSON.parse(albums_respuesta);\n      albums = albums.data.items;\n    }).catch(function (error) {\n      // handle success\n      console.log(error);\n    });\n  }\n\n  show_albums() {\n    let albums = this.state.albumnes;\n    albums.map(album => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"album\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: album.external_urls.spotify,\n            target: \"_blank\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: album.images[1].url,\n              class: \"img-fluid\",\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: album.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"tracks\",\n            children: [\"Tracks : \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: album.total_tracks\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 60\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: album.release_date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }, this);\n    });\n  }\n\n  render() {\n    let artists = '';\n    let albums = '';\n\n    if (this.props.found_data != '') {\n      artists = JSON.parse(this.props.found_data);\n      artists = artists.data.artists.items;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"main\", {\n        children: artists ? artists.map((artist, key) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"row content_artist\",\n              onClick: this.albums.bind(this),\n              id: artist.id,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-2\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cont_img\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"img-fluid\",\n                    src: artist.images[2] ? artist.images[2].url : '',\n                    alt: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-6\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"info_artist\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                      class: \"artist\",\n                      children: artist.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 98,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"followers \", artist.followers.total]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 99,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                      href: 'https://open.spotify.com/artist/' + artist.id,\n                      className: \"ver_artist\",\n                      target: \"_blank\",\n                      children: \"Ver artista\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 100,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-4\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"generos\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: artist.genres.map((genero, index) => {\n                      return /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"genero\",\n                        children: [genero, \" \"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 110,\n                        columnNumber: 61\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row albums\",\n              children: this.state.albums == true ? this.show_albums() : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this);\n        }) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/davidacuna/Documents/Spotify_test/spotify_test/src/components/main.js"],"names":["Axios","React","Main","Component","constructor","props","state","artist","albums","content_albums","id","albumnes","e","console","log","currentTarget","temp_state","setState","artist_id","token","headers","params","method","then","response","albums_respuesta","JSON","stringify","parse","data","items","catch","error","show_albums","map","album","external_urls","spotify","images","url","name","total_tracks","release_date","render","artists","found_data","key","bind","followers","total","genres","genero","index"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport React from 'react';\n\nimport '../css/main.scss'\n\nclass Main extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            artist : '',\n            albums : false,\n            content_albums : [],\n            id : '',\n            albumnes: ''\n        }\n    }\n    albums(e){\n        console.log(e.currentTarget)\n        let temp_state = this\n        this.setState({\n            albums : true,\n            id : e.currentTarget.id\n        })\n        let artist_id = e.currentTarget.id\n        console.log(artist_id)\n        console.log(this.props.token)\n        \n        Axios('https://api.spotify.com/v1/artists/' + artist_id + '/albums',{\n            headers : {\n                'Authorization' : 'Bearer ' + this.props.token\n            },\n            params : {\n                id : artist_id\n            },\n            method: 'GET'\n        })\n        .then(function (response) {\n            // handle success\n            console.log(response)\n            let albums_respuesta = response;\n            albums_respuesta = JSON.stringify(albums_respuesta)\n\n            temp_state.setState({\n                albumnes : albums_respuesta\n            })\n            var albums = []\n            albums = JSON.parse(albums_respuesta)\n            albums = albums.data.items\n        })\n        .catch(function (error) {\n            // handle success\n            console.log(error)\n        })\n    }\n    show_albums(){\n        let albums = this.state.albumnes\n        \n            albums.map(\n                album => {\n                    return (\n                        <div className=\"col-4\">\n                            <div className=\"album\">\n                                <a href={album.external_urls.spotify} target='_blank'>\n                                    <img src={album.images[1].url} class='img-fluid' alt=\"\"/>\n                                    <p>{album.name}</p>\n                                </a>\n                                <p class='tracks'>Tracks : <span>{album.total_tracks}</span></p>\n                                <span>{album.release_date}</span>\n                            </div>\n                        </div>\n                    )\n                }\n            )\n    }\n    render(){\n        let artists = ''\n        let albums =''\n        if(this.props.found_data != ''){\n            artists = JSON.parse(this.props.found_data)\n            artists = artists.data.artists.items\n        }\n        return (\n            <div>\n                <main>\n                    {artists ? artists.map(\n                        (artist, key) => {\n                            return(\n                                <div>\n                                    <div class='row content_artist' onClick={this.albums.bind(this)} id={artist.id}>\n                                        <div className=\"col-2\">\n                                            <div className=\"cont_img\">\n                                                <img className='img-fluid' src={ artist.images[2] ? (artist.images[2].url) : ''} alt=\"\"/>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-6\">\n                                            <div className=\"info_artist\">\n                                                <div>\n                                                    <h3 class='artist'>{artist.name}</h3>\n                                                    <p>followers {artist.followers.total}</p>\n                                                    <a href={'https://open.spotify.com/artist/' + artist.id} className='ver_artist' target='_blank'>Ver artista</a>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-4\">\n                                            <div className='generos'>\n                                                <p>\n                                                {artist.genres.map(\n                                                    (genero,index) => {\n                                                        return(\n                                                            <span className='genero'>{genero} </span>\n                                                        )\n                                                    }\n                                                )}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"row albums\">\n                                        \n                                        { this.state.albums == true ?\n                                        this.show_albums() : ''}\n                                    </div>\n                                </div>\n                            )\n                        }) \n                    : ''}\n                </main>\n                <div className=\"list\">\n \n                </div>\n            </div>\n        )\n        \n    }\n}\n\n\n\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}